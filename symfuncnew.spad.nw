% -*- mode: Noweb; noweb-code-mode: aldor-mode -*-
\documentclass{article}
\usepackage{axiom,amsthm,amsmath,url}
\newtheorem{ToDo}{ToDo}[section]

\newcommand{\Axiom}{{\tt Axiom}}

%% some definitions
\def\Sym{\rm Sym}
\def\ot{\otimes}
\def\la{\leftangle}
\def\ra{\rightangle}
%%

\begin{document}
\title{\$SPAD/src/algebra symfunc.spad}
\author{Bertfried Fauser, Franz Lehner, Martin Rubey}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject

\section{category SYMBASC SymmetricFunctionBasisCategory}

The category \spad{SYMBAS} provides the basic notions of a symmetric function
category. The bases are indexed by integer partitions. Main examples of bases 
are $\lambda,\mu,\nu,\ldots $ integer partitions):
\begin{index}
\item Schur function basis $s_\lambda$ ($GL(n)$ and/or $S_m$ irreducible characters)
\item power sum symmetric functions $p_\lambda =\prod_{i=1}^l p_{\lambda_i}$
      (aka Adams operations)
\item elemntary symmetric functions $e_\lambda =\prod_{i=1}^l e_{\lambda_i}$
      (aka lambda operations)
\item forgotten symmetric functions $f_\lambda$ (dual of elementray ones)
\item complete symmetric functions $h_\lambda =\prod_{i=1}^l h_{\lambda_i}$
      (aka sigma operations)
\item monomial symmetric functions $m_\lambda$ the classical type of symmetric
      functions obtained by symmetrysing a monomial $\prod x_i^{m_i}$, this 
      basis is dual to the complete symmetric function basis

We defined the levels of algebraic operations:
\begin{description}
\item{Outer Hopf algebra}
  The outer Hopf algebra, given by the module underlying the symmetric function 
  ring, the associative unital outer product, the coassociative counital outer
  coproduct. This coproduct arises from additively splitting the underlying 
  alpabet (variables) $X=x_1+x_2+\ldots+x_n$ understood as the direct sum of
  one dimensional spaces spanned by $\{e_i\}_i$ with coefficients $\{x_i\}_i$.
  Alphabets are assumed to have a total order, and in the following we assume
  that the alphabest are countably infinite. The splitting is written as
  $X\rightarrow Z=X+Y$ (disjoint sets of the alphabets $X$ and $Y$) inducing 
  a map
  \[
    \Sym(X) \rightarrow \Sym(X)\ot \Sym(X) \cong \Sym(X,Y)
  \] 
  This reads on elements
  \[
     A(X) \rightarrow A_{(1)}(X) \ot A_{(2)}(X) \cong  A(X,Y)=A(X+Y) 
  \]
  We use Sweedler index notation for the terms in the tensor product and
  supress as usual the implicit understood sum over these terms. In the Schur
  basis we find
  \[
    s_\lambda(X) \rightarrow s_\lambda(X+Y) \cong
         = \sum_{\mu,\nu} c^\lambda_{\mu,\nu} s_\mu(X) \ot s_\nu(X)
     \cong \sum_{\mu,\nu} c^\lambda_{\mu,\nu} s_\mu(X)s_\nu(Y)
  \]
  The co/multiplication table c^\lambda_{\mu,\nu} comprises the 
  Littlewood-Richardson coefficients. We find that the mutlitplication table
  equals the comultiplication table (section coefficients) due to self duality.
  The outer product/coproduct are graded maps with respect to the weight (numer 
  of boxes in a diagram associated to a partition)
  \[
    \Sym_n(X) \ot \Sym_m(X) \rightarrow \Sym_{n+m}(X)
  \]
  \[
    \Sym_n(X) \rightarrow \sum_{n1+n2=n} \Sym_{n1}(X) \ot \Sym_{n2}(X)
  \]
  The skew operation is the adjoint of outer multiplication with respect to the
  Schur-Hall scalar product, skews are also called Foulkes derivatives and behave
  like differential operators. Using the scalar product
  \[
  \la , \ra : \Sym \ot \Sym \rightarrow \Sym
  \]
  one defines
  \[
    \la A/B , C\ra :=  \la A , BC\ra
  \]
  eg for power sum symmetric functions one finds
  \[
    \la p_{kl}/p_n , p_m\ra = \la p_{kl},p_{nm}\ra
  \]
  Since the p_n are primitive elements of the outer coalgebra, these elements 
  behave like elementary (partial) derivations ($A,B,\ldots\in\Sym(X)$ general
  elements)
  \[
    A/p_n = 1/n*\partial_{p_n}(A)
  \]
  obeying a Leibniz rule
  \[
    \partial_{p_n}(AB) = \partial_{p_n}(A)B+A\partial_{p_n}(B)
  \]
  The outer coproduct generalizes this (basis free) to all elements producing
  a higher type Libniz rule.

  The map $dimGL : \Sym(X) \rightarrow R$ ($R$ base ring) is an 
  co/algebrahomomorphism of the outer co/product. This is employed in the 
  computation of the nonlinear part of the plethysm.

\item{Inner bialgebra}
  The inner bialgebra (this is actually a non special Frobenius algebra and a 
  Frobenius coalgebra) The inner product descibes the group ring $S_n$ of the
  symmetric group, and the tesnor product decomposition of irreducibe $S_n$
  characsters. The coproduct is obtained by dualization ($\Sym(X)$ is a self
  dual Hopf algebra via the Schur-Hall scalar product, which indices a map
  $\Sym(X)\rightarrow \Sym(X)^*$ which we use here for dualization). The inner 
  bialgebra is associative and coassociative the complete symmetric function 
  $h_n$ is the unit, projection on the coefficient of $h_n$ is a counit in 
  grade $n$ Since the counit maps, if collected, form an infinite series, this
  prevents this algebra from being counital on $\Sym(X)$. There is hence no antipode.
  
  In terms of alphabets, one obtaines the inner coproduct from replacing the
  alphabet $X$ by the product alphabet $Z=XY$ (for dijoint alphabets $X$, $Y$) 
  and expanding terms in $X$ and $Y$. This induces a map
  \[
    \Sym(X) \rightarrow \Sym(X) \ot \Sym(X) \cong \Sym(X,Y)
  \]
  on elements we get
  \[
    A(X) \rightarrow A(XY) \cong A_{[1]}(X) \ot) A_{[2]}
  \]
  wirh Sweedler index notation, using square-brackets. In the Schur basis we get
  \[
    s_\lambda(X) \rightarrow s_\lambda(XY)
        = \sum_{\mu,\nu} g^\lambda_{\mu,\nu} s_\mu(X) \ot s_\nu(X)
    \cong \sum_{\mu,\nu} g^\lambda_{\mu,\nu} s_\mu(X)s_\nu(Y)
  \]
  The co/multiplication table $g^\lambda_{\mu,\nu}$ comprises the Kronnecker 
  coefficients, computed via the Murnaghan-Nakayama rule. $g^a_{bc}$ is totally 
  symmetric under permutations of $abc$. Due to duality we find furthermore that
  the mutlitplication table equals the comultiplication tables (section coefficients).
  
  Note that in the power sum basis the inner coproduct is just the diagonal.
  
  The map $dimSN : \Sym(X) \rightarrow R$ ($R$ ground ring, but $dimSN$ is actually
  integral in this setting) is an co/algebrahomomorphism of the inner co/product.

\item{Outer plethysm}
  The third type of product is the compositional product of symmetric functions, 
  or \spad{outer plethysm} [Littlewood]. The composition product renders Schur
  functions (symmetric functions) to be polynomial functors on the set of alphabets.
  The compositional product is noncommutative and not linear in the second factor.
  The Schur function $s_{(1)}$ is the left/right unit of plethysm, as usual constant
  terms are not allowed right hand arguments.\\
  {\bf Example:}\\
  $s_{(1,1)}[s_{(2)}]$ we compute in two steps
  \[
    s_{(2)}(x1,x2) = x1^2+x1x2+x2^2 =: y1+y2+y3
  \]
  $Y$ is a new alphabet and includes possibel multiplicities, now we expand the
  outer function $s_{(1,1)}$ inthe alphabet $Y$
  \[
    s_{(1,1)}(y1,y2,y3) = y1y2+y1y3+y2y3
            = x1^3x2 + x1^2x2^2 + x^x2^3    
  \]
  where we reexpressed the letters $yi$ by the monomilas in the $x_i$ which defined
  them. If we reexpress the result in terms of Schur functions $s_\mu(x1,x2)$ we get
  \[
    s_{(1,1)}[s_{(2)}] = s_{(31)}
  \]
  The computation of plethysms is notoriously known to be hard. The present 
  implementation provides the unique feature, that the argument of the plethysm 
  (if $R$ allows this) can be any $R$-polynomial (eg fractional, negative, or 
  polynomial coefficients) in the used symmetric function basis.\\
  {\bf Example:} (We drop some parentheses around partitions)
  \[
     s_2[-s_1] = s_{(1,1)} = antpode(s_2)
  \]
  \[
    s_2[1/2*s_1] = 3/8*s_2 + 1/8*s_{(1,1)}
  \]
  \[
    s_{(1,1)}[q*s_2] =  1/2(q(q-1))*s_(4)+1/2(q(q-1)*s_(22) +1/2(q(q+1)*s_(31)
  \]
  
  Dualizing the plethysm gives the new coproduct of coplethysm which is not 
  described in literature (yet).
\begin{description}


<<category SYMBASC SymmetricFunctionBasisCategory>>=
)abbrev category SYMBASC SymmetricFunctionBasisCategory
++ Author: Bertfried Fauser b.fauser@cs.bham.ac.uk,
++         Franz Lehner lehner@finanz.math.tugraz.at
++         Martin Rubey
++ Date Created: October 2009
++ Date Last Updated: 21 October 2009
++ Fix History: 
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++    The category SYMBAS provides the basic notions of a symmetric function
++    category. The bases are indexed by integer partitions. Main examples
++    of bases are:
++      - Schur function basis  (GL(n) and/or S_m irreducible characters)
++      - power sum symmetric functions (aka Adams operations)
++      - elemntary symmetric functions (aka lambda operations)
++      - forgotten symmetric functions (dual of elementray ones)
++      - complete symmetric functions (aka sigma operations)
++      - monomial symmetric functions, the classical type of symmetric
++        function obtained by symmetrysing a monomial, this basis is
++        dual to the complete symmetric function basis
++    See symfunc.spad.pahmlet for further explanations.

SymmetricFunctionBasisCategory(R:CommutativeRing): Category == Exports where
 
    B ==> Record(name:Symbol, index:Partition)
    SFRB ==> SymmetricFunctions(R,%)
    MxM ==> TensorPower(2,R,%,SFRB)
    PART ==> Partition

    Exports ==> OrderedSet with

        -- general constants and morphisms
        
        0:() -> %
          ++ null element

        1:() -> %
          ++ unit element

        coerce:Partition -> %
          ++ coerces partitions into symmetric function basis elements

        index:%->Partition
          ++ creating elements

        -- the outer Hopf algebra

        outer:(%,%) -> SFRB
          ++ outer multiplication
          ++ (tensor product decomposition of GL characters)

        unit:R -> %
          ++ the unit morphism of the outer product

        coouter:% -> MxM
          ++ outer comultiplication
        
        counit:% -> R
          ++ the counit morphism of the outer coproduct
            
        antipode:% -> SFRB
          ++ the antipode (convolutive inverse of the identity morphisms)
          ++ of the outer Hopf algbra

        -- the inner bialgebra (Frobenius algebra)

        inner:(%,%) -> SFRB
          ++ inner multiplication
          ++ (tensor product decompositio of S_n characters), inner multiplication 
	  ++ is the Kronecker product

        coinner:% -> MxM
          ++ inner comultiplication        

        -- higher order maps

        plethysm: (%,%) -> SFRB
          ++ plethysm is the compositonal product of symmetric functions
          ++ We use plethysm(A,B) = A[B]. The plethysm is linear in the first
          ++ argument A and nonlinear in the second argument B

        -- further usefull and auxillay functions
        
        if R has IntegralDomain then
            dimGL:(%,R) -> R
              ++ dimension of an irreducible heighest weight GL(n) module (in the
              ++ Schur basis) with heighest weight vector a partition. In other
              ++ bases this is the dimenions obtained by transforming into
              ++ the Schur basis and compute the dimension there (internally it
              ++ may be computed directly)
          else
            dimGL:(%,Integer) -> R

        dimSN:% -> R
          ++ dimension of an irreducible S_n character (of weight n, in the 
          ++ Schur basis). Other bases implement the same map, but without
          ++ this intepretation (see also dimGL)

        scalar:(%,%) -> R
          ++ The Schur-Hall (Refield) scalar product of symmetric functions.
          ++ This scalar product renders the Schur basis orthonormal and the
          ++ power sum basis orthogonal. It defines the canonical dualization
          ++ Sym(V) --> Sym(V)* as a graded map (choice of covector basis).
@


<<category SYMFCAT SymmetricFunctionCategory>>=
)abbrev category SYMFCAT SymmetricFunctionCategory
++ Author: Bertfried Fauser b.fauser@cs.bham.ac.uk,
++         Franz Lehner lehner@finanz.math.tugraz.at
++         Martin Rubey
++ Date Created: October 2009
++ Date Last Updated: 21 October 2009
++ Fix History: 
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++    This is the basic category where symmetric functions and many of their
++    maps are defined generically. To actually construct a symmetric function
++    domain, one needs also the basis category SYMBAS
SymmetricFunctionCategory(R:CommutativeRing,B:SymmetricFunctionBasisCategory(R)):Category == Exports where

    MxM ==> TensorPower(2,R,B,%)

    Exports ==> with
    <<category SYMFCAT SymmetricFunctionCategory exports>>
@ 
<<category SYMFCAT SymmetricFunctionCategory exports>>=    
    HopfAlgebra(R,MxM)

    -- exports for the outer Hopf algebra
    -- algebra and coalgebra structure

    unit:R -> %
      ++ the unit, a map R -> %

    counit:% -> R
      ++ the counit, a map % -> R
    
    -- The following are linearly extended from the basis

    outer:(%,%) -> %       -- default
      ++ outer multiplication
      ++ the outer product is the default product for symmetric functions
      ++ it is mapped on the usual '*' for the algebra multiplication.

    -- coalgebra structure

    coouter:% -> MxM       -- default       
      ++ coouter is the coproduct of the outer Hopf algebra, it is
      ++ obtained by dualizing the outer product w.r.t. the Schur-Hall
      ++ scalar product. It is defined on the basis and linear extended

    antipode:% -> %
      ++ the antipode of the outer Hopf algebra
      ++ the antipode is a generalized inverse with signature % -> %
    
    -- exports of the inner bialgebra structure (Frobenius algebra)

    inner:(%,%) -> %
      ++ inner is the Kronecker product
      ++ inner is a second product on symmetric functions. It is obtained
      ++ from the tensor product decomposition of symmetric group characters
      ++ via the Frobenius charactersitic map ch(\Xi^\lambda)=s_\lambda
      ++ in the Schur function basis
      ++ The quadruple (inner, unit, coinner, counit) forms a Frobenius
      ++ co/algebra structure on the ring of symmetric functions.

    coinner:% -> MxM
      ++ inner comultiplication
      ++ coinner is the coproduct obtained by dualization of the inner
      ++ product w.r.t. the Schur-Hall scalar product.
      ++ coinner copies power sum symmetric functions and characterizes 
      ++ them this way categorically.

    -- exports for further auxiliary functions on symmetric functions

    if R has IntegralDomain then
        dimGL:(%,R) -> R
          ++ dimension of a GL(n) heighest weight module with heighest weight
          ++ \lambda linearly extended to the module
          ++ dimGL computes the dimension of heighest weight irreducible
          ++ polynomial GL(n) modules in the Schur basis. In the power sum basis
          ++ dimGL weights the basis with a prefactor n^\length(\lambda) for
          ++ any basis element, and is linear extended
      else
        dimGL:(%,Integer) -> R 

    dimSN:% -> R
      ++ dimension of a S_n character (of weight n)
      ++ dimSN computes the dimension of an irreducible S_n module with
      ++ heighest weight \lambda in the Schur basis.
      ++ The dimension n of the particular S_n is obtained by the weight
      ++ of the partition (number of boxes in the Young diagram)
      ++ the implemented dimSN is hence the union of maps dimSN_n for all n
    
    scalar:(%,%) -> R
      ++ 
      ++ linearly extended to the module
--      LittlewoodRichardsonCoefficient:(PART,PART,PART)-> R
      ++ c_{mu,nu}^lambda
--      KroneckerCoefficient:(PART,PART,PART)-> R
      ++ g_{mu,nu}^lambda

    plethysm:(%,%) -> %
      ++ \spad{plethysm} defines the plethysm of two symmetric functions
@ 

Two possibilities:
using the category:

<<domain SYMF SymmetricFunctions with category on>>=
    Term ==>  Record(k:B,c:R)
    Term2 ==> Record(k:Vector B,c:R)
    MxM ==> TensorPower(2,R,B,%)

-- 1. strange compiler error: 
--    in outerB wants SymmetricFunctionBasisCategory R ???
    Exports ==> Join(FreeModuleCategory(R,B),SymmetricFunctionCategory(R,B)) with
        SymmetricFunctionBasisCategory R
    
-- 2. index 0 is too large
--  Exports ==> FreeModuleCategory(R,B) with
--      SymmetricFunctionCategory(R,B)

      
--        monomial1:(R,B)->%
--        monomial:(R,B)->%    
@ 

exporting the operations directly:

<<domain SYMF SymmetricFunctions with category off>>=
    Term ==>  Record(k:B,c:R)
    MxM ==> TensorPower(2,R,B,%)

    Exports ==> FreeModuleCategory(R,B) with
    <<category SYMFCAT SymmetricFunctionCategory exports>>
@ 

Currently only works without category.

<<domain SYMF SymmetricFunctions>>=
)abbrev domain SYMF SymmetricFunctions
++ Author: Bertfried Fauser b.fauser@cs.bham.ac.uk,
++         Franz Lehner lehner@finanz.math.tugraz.at
++         Martin Rubey
++ Date Created: October 2009
++ Date Last Updated: 21 October 2009
++ Fix History: 
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++   This domain constructs symmetric functions in a particular basis, defined
++   in SymmetricFunctionBasisCategory SYMBAS. It mainly provides the structur
++   maps of the outer Hopf algebra, inner bialgebra (Frobenius alegbra) and
++   plethysms, as the scalar prodcut, and dimension formulae.
SymmetricFunctions(R:CommutativeRing, B:SymmetricFunctionBasisCategory R):Exports == Implementation  where
<<domain SYMF SymmetricFunctions with category on>>

    Implementation ==> FreeModule(R,B) add

        Rep:= FreeModule(R,B)
        rep(x:%):Rep == x :: Rep
        per(r:Rep):% == r :: %
        
        monomial(r:R,b:B):% == per ( monomial(r,b)$Rep )
        
        1:% == monomial(1,0$B)
        1(r:R):% == monomial(r,0$B)

        unit(r:R):% == monomial(r,0$B)

        counit(x:%):R == 
            zero? x => 0
            res:R:=0
            lt:List Term:=listOfTerms x
            while not empty? lt repeat
                res:=res + (counit((first lt).k)$B) *(first lt).c
                lt:=rest lt
            res

        outerB:(B,B)->%
        
        outerB(b1:B,b2:B):% == 
--            res: SymmetricFunctions(R,B):= outer(b1,b2)$B
--            res  pretend %
            (outer$B)(b1,b2) pretend %
                    
        outer(x:%,y:%):% ==
            res:% :=0
            for xi in listOfTerms x repeat
                for yi in listOfTerms y repeat
                    import Term             
                    ci:R := (xi c) * (yi c)
                    res1:% := (outer(xi k,yi k)$B) pretend %
                    res := res + ci*res1
            res
        
        -- set * as default product to the outer product
        _*(x:%,y:%):% == outer(x,y)

        coouterB(b:B):MxM == coouter(b)$B pretend MxM

        coouter(x:%):MxM == linearExtend(coouterB,x)$(FreeModuleFunctions2(R,B,%,MxM))

        -- does not work?
--      coouter(x:%) == linearExtend(coouter$B,x)$(FreeModuleFunctions2(R,B,%,MxM)) --pretend MxM
        
        antipodeB(b:B):% == antipode(b)$B pretend %
        
        antipode(x:%):% == linearExtend(antipodeB,x)$(FreeModuleFunctions2(R,B,%,%))      

        inner(x:%,y:%):% == 
            res:% :=0
            xi,yi:Term
            for xi in listOfTerms x repeat
                for yi in listOfTerms y repeat
                    ci:R := (xi c) * (yi c)
                    res := res + ci*(inner(xi k,yi k) pretend %)
            res

        coinnerB(b:B):MxM == coinner(b)$B pretend MxM
        
        coinner(x:%):MxM == linearExtend(coinnerB,x)$(FreeModuleFunctions2(R,B,%,MxM))

        dimSN(x:%):R == linearExtend(dimSN$B,x)
        
        if R has IntegralDomain then
            dimGL(x:%,n:R):R ==
              res : R := 0
              for term in listOfTerms x repeat
                 res:= res + (term c)*dimGL(term k,n)
              res
          else
            dimGL(x:%,n:Integer):R ==
              res : R := 0
              for term in listOfTerms x repeat
                 res:= res + (term c)*dimGL(term k,n)
              res

        scalar(x:%,y:%):R ==
           xi,yj: Term
           res : R := 0
           for xi in listOfTerms x repeat
              for yj in listOfTerms y repeat
                 res:=res+(xi c)*(yj c)*scalar(xi k,yj k)
           res 
        
        -- local function
        plethysmRight:(B,List Term) -> %
          -- the plethysm is not right linear, we have to expand the
          -- plethysm over sums and products using the inner and outer coproduct
          -- A[B+C+...+D] = A_(1)[B]*A_(2)[C+...+D]  coouter(A)=\sum A_(1) (x) A_(2)
          -- A[rB] = dimGL(A_[1],r)*A_[2][B]
          -- with coinner(A) = A_[1] (x) A_[2] and the dimGL (see above)

        plethysmB(p1:B,p2:B):% == plethysm(p1,p2)$B pretend %
        if R has IntegralDomain then
            dimGLB(p1:B,n:R):% == dimGL(p1,n)$B pretend %
          else
            dimGLB(p1:B,n:Integer):% == dimGL(p1,n)$B pretend %

-- does not work generally, since (a)^#b has to be replaced by dimGL
-- don't know how to do this for general R, BF.
        plethysmRight(p1:B,liy:List Term):% ==
            ty1: Term
            zero? index p1  => monomial(1,p1)
            res: % := 0
            if #liy = 1 then
--              return dimGLB(index p1,(first liy).c))*(plethysmB(p1,(first liy).k))
              return ((first liy).c)^(#index p1)*(plethysmB(p1,(first liy).k))
            ty1:=first liy
            resty:List Term := rest liy
            cop1: MxM := coouter(p1)$B pretend MxM
            import List MxM 
            import Term2
            mxm: Term2
            for mxm in listOfTerms cop1 repeat
               -- in one line it compiles really slow
--             res1:% := (mxm.c)*(ty1.c)^(#(index( (mxm.k).1))) *plethysmB( (mxm.k).1,ty1 k)*plethysmRight((mxm.k).2,resty)
               exp1:NonNegativeInteger := #(index( (mxm.k).1))
--               cc:R := (mxm.c)*dimGLB(index( (mxm.k).1),(ty1.c))  --exp1 then obsolet
               cc:R := (mxm.c)*(ty1.c)^exp1
               plet1:% :=plethysmB( (mxm.k).1,ty1 k)
               plet2:% :=plethysmRight((mxm.k).2,resty)
               res1:% := cc*plet1*plet2
               res:=res+res1
            res
           
        plethysm(x:%,y:%):% ==
            tx,ty: Term
            x = 0 or y = 0 => monomial(0, coerce(partition [])$B)
            res:% := 0
            -- plethysm is left linear but not right linear
            -- the nonlinear bit is done in plethysmRight
            for tx in listOfTerms x repeat
                res:=res+(tx c)*plethysmRight(tx k,listOfTerms y)
            res
           
@ 


\section{domain PSYMBAS PowerSumSymmetricFunctionBasis}
<<domain PSYMBAS PowerSumSymmetricFunctionBasis>>=
)abbrev domain PSYMBAS PowerSumSymmetricFunctionBasis
++ Author: Bertfried Fauser b.fauser@cs.bham.ac.uk,
++         Franz Lehner lehner@finanz.math.tugraz.at
++         Martin Rubey
++ Date Created: October 2009
++ Date Last Updated: 21 October 2009
++ Fix History: 
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++   The domain PSYMBAS implements the structure of a symmetric function Hopf 
++   algebra in the power sum symmetric function basis. This basis is indexed by
++   integer partitions. The name of the basis is a parameter of this domain,
++   default is 'p
--PowerSumSymmetricFunctionBasis(R:CommutativeRing):Exports == Implementation where
PowerSumSymmetricFunctionBasis(R:CommutativeRing,name:Symbol): Exports == Implementation where

    M ==> SymmetricFunctions(R,%)
    MxM ==> TensorPower(2,R,%,M)

    Exports ==> SymmetricFunctionBasisCategory(R)
        
    Implementation ==>  Partition add
    
        Rep:= Partition
        rep(x:%):Rep == x :: Rep
        per(r:Rep):% == r :: %

        coerce(p:Partition):% == per p

        index(x:%) == rep x

        coerce(b:%):OutputForm == 
--          coerce(subscript('p,[coerce(rep b)$Rep]))$Symbol
--          i:Integer
--          ind:List OutputForm:= [i::OutputForm for i in coerce(rep b)@(List Integer)]
--          coerce(subscript('p,ind))$Symbol    
            ind2:OutputForm:=(coerce$Rep)(rep b)
--          coerce(subscript('p,[ind2]))$Symbol
--          coerce(subscript(name,[ind2]))$Symbol
--          coerce(name([ind2]))$Symbol
            sub(name::OutputForm, ind2)

        counit(b:%):R == 
            zero? (rep b) => 1
            0

        outer(p1:%,p2:%):M == 
            monomial(1$R,p:%:= per (rep p1 +$Rep rep p2))$M
        -- On power sums its just unordered concatenation of partitions 
        -- on the basis.
            
        coouter(p1:%):MxM == 
            p1 = 0 => tensor([0@%,0@%])$MxM
            pi:Integer
            l:List % := [per(partition([pi])$Rep) for pi in coerce(p1)@(List Integer)]
            lt:List MxM :=[tensor([0@%, pip])$MxM + tensor([pip,0@%])$MxM for pip in l]
            reduce(_*,lt)
            
        antipode(p1) == monomial((-(1$R))^#(coerce(rep p1)@(List Integer)), p1)
          -- The power sum basis monoms are (almost) idempotens for this operation
          -- the multiplicity is the zee-factor (pdct) obtained from the cycle type
          -- of \rho:Partition of a permutation \sigma

        inner(p1,p2) ==
            not p1 = p2 => 0
            monomial((pdct p1)::R,p1)

        coinner(p1) == tensor([p1,p1])$MxM -- monomial(1,vector [p1,p1])

        plethysm(p1,p2) ==
           import B
           -- need to check for empty partitions, why?
           p1 = 0 => monomial(1,p1)
           p2 = 0 => monomial(1,p2)
           li : List Integer := []
           for i in  reverse(p1::(List Integer)) repeat
               for j in reverse(p2::(List Integer)) repeat
                  li := concat(i*j,li)
           monomial(1, partition li)

        dimSN(p1) ==
            wgt:Integer := weight rep p1 
            #rep p1 = wgt => coerce(wgt)$R
            0

        -- this is actually not necessary for power sums, anyhow power sums
        -- should be defined over the rationals at least...
        if R has IntegralDomain then
            dimGL(p1:%,n:R):R == n^(#rep p1)
          else
            dimGL(p1:%,n:Integer):R == (n::R)^(#rep p1)

        scalar(p1,p2):R ==
           p1=p2 => coerce(pdct rep p1)$R
           0
@


\section{domain SSYMBAS SchurSymmetricFunctionBasis}
<<domain SSYMBAS SchurSymmetricFunctionBasis>>=
)abbrev domain SSYMBAS SchurSymmetricFunctionBasis
++ Author: Bertfried Fauser b.fauser@cs.bham.ac.uk,
++         Franz Lehner lehner@finanz.math.tugraz.at
++         Martin Rubey
++ Date Created: October 2009
++ Date Last Updated: 21 October 2009
++ Fix History: 
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++   The domain SSYMBAS implements the structure of a symmetric function Hopf 
++   algebra in the Schur function basis. This basis is indexed by integer
++   partitions. The name of the basis is a parameter of this domain,
++   default is 's
--SchurSymmetricFunctionBasis(R:CommutativeRing):Exports == Implementation where
SchurSymmetricFunctionBasis(R:CommutativeRing,name:Symbol): Exports == Implementation where

    M ==> SymmetricFunctions(R,%)
    MxM ==> TensorPower(2,R,%,M)

    Exports ==> SymmetricFunctionBasisCategory(R)
        
    Implementation ==>  Partition add
    
        Rep:= Partition
        rep(x:%):Rep == x :: Rep
        per(r:Rep):% == r :: %

        coerce(p:Partition):% == per p

        index(x:%) == rep x

        coerce(b:%):OutputForm == 
--          coerce(subscript('s,[coerce(rep b)$Rep]))$Symbol
--          i:Integer
--          ind:List OutputForm:= [i::OutputForm for i in coerce(rep b)@(List Integer)]
--          coerce(subscript('s,ind))$Symbol    
            ind2:OutputForm:=(coerce$Rep)(rep b)
--          coerce(subscript('s,[ind2]))$Symbol
--          coerce(subscript(name,[ind2]))$Symbol
--          coerce(name([ind2]))$Symbol
            sub(name::OutputForm, ind2)

        counit(b:%):R == 
            zero? (rep b) => 1
            0
        outer(p1:%,p2:%):M == 
            import B
            p1 = 0 => monomial(1$R,p2 pretend Partition)$M
            p2 = 0 => monomial(1$R,p1 pretend Partition)$M
            mp: Multiset Partition := multpar(rep p1,rep p2)$Tableau2
            lp: List Partition := members mp
            res:M := 0
            for p in lp repeat
               res := res + monomial(count(rep p,mp)::R,rep p)$M
            res


--        outer(p1:%,p2:%):M == 
--            monomial(1$R,p:%:= per (rep p1 +$Rep rep p2))$M
--        -- On power sums its just unordered concatenation of partitions 
--        -- on the basis.


@

\section{Tests:}
<<test>>=
-- define basis and symmetric function HA
PB:=PSYMBAS(Fraction Polynomial(Integer),'p)
P :=SYMF(Fraction Polynomial(Integer), PB)
-- partitions
p0B:Partition:=0$Partition
p1B:Partition:=partition [2,1]
p2B:Partition:=partition [3,1]
p3B:Partition:=partition [3,3,1]
p4B:Partition:=partition [2,2]
-- some operations on partitions
outer(p1B,p2B)$PB
inner(p2B,p4B)$PB
inner(p3B,p3B)$PB
-- define monomials
p0:=monomial(1,p0B)$P
p1:=monomial(1,p1B)$P
p2:=monomial(1,p2B)$P
p3:=monomial(1,p3B)$P
p4:=monomial(1,p4B)$P
-- some computtaions on these monomials
outer(p2,p3)
outer(p1+q*p2,p2+t*p3)
coouter p3
coouter(2*p0)
unit(1)$P  -- works only with $P correctly, why?
unit(4)$P
unit(t^2+4)$P 
counit p3
counit p0
counit(p0+t*p2)
counit(t*p0+p2)
antipode p2
antipode p3
antipode(t*p2+q*p3)
coinner p3
coinner(2*p0)
coinner(t*p1+3*p2)
plethysm(p1B,p3B)$PB
plethysm(p2,p2)
plethysm(2*p1,p2)
plethysm(2*p1+p2,p2)
plethysm(p2,q*p3)
plethysm(p1,p1+2*p2+3*p3)
plethysm(t*p1,t*p2+1/t*p3)
dimGL(p2,3)
dimGL(p3,q)
dimGL(p2+p3,q)
dimSN(p1)
dimSN(p2)
dimSN(p3+p4)
scalar(p1,p2)
scalar(p1,p1+p2)
scalar(p2+p3,p3+p4)
---- SCHUR FUNCTIONS ----
par0 := partition []
par1 := partition [3,1,2]
par2 := partition [3,3]
par3 := conjugate par2
par4 := partition [6]
SB:=SSYMBAS(Fraction Polynomial(Integer),'s)
S :=SYMF(Fraction Polynomial(Integer), SB)
-- define monomails
p0:=monomial(1,par0)$S
p1:=monomial(1,par1)$S
p2:=monomial(1,par2)$S
p3:=monomial(1,par3)$S
p4:=monomial(1,par4)$S
-- some computatuons on these monomials
inner(p0,p1)
inner(p1,p1)
inner(p4,p2)
inner(p2,p2)
-- Kronnecker multiplication tables
liPars := entries complete partitions(3)

LLI2: List List S := []
--
for pi1 in liPars repeat
   list2: List S := []
   for pi2 in liPars repeat
     mon1:=monomial(1,partition pi1)$S
     mon2:=monomial(1,partition pi2)$S
     list2:=concat(list2,inner(mon1,mon2))
   LLI2 := concat(LLI2,list2)
matrix(LLI2)
--
liPars := entries complete partitions(4)

LLI2: List List S := []
--
for pi1 in liPars repeat
   list2: List S := []
   for pi2 in liPars repeat
     mon1:=monomial(1,partition pi1)$S
     mon2:=monomial(1,partition pi2)$S
     list2:=concat(list2,inner(mon1,mon2))
   LLI2 := concat(LLI2,list2)
matrix(LLI2)
@ 
<<*>>=
<<category SYMBASC SymmetricFunctionBasisCategory>>
<<category SYMFCAT SymmetricFunctionCategory>>
<<domain SYMF SymmetricFunctions>>
<<domain PSYMBAS PowerSumSymmetricFunctionBasis>>
<<domain SSYMBAS SchurSymmetricFunctionBasis>>
@ 
