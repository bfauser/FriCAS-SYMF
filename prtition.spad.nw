\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra prtition.spad}
\author{William H. Burge}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{domain PRTITION Partition}
<<domain PRTITION Partition>>=
)abbrev domain PRTITION Partition
++ Domain for partitions of positive integers
++ Author: William H. Burge
++ Date Created: 29 October 1987
++ Date Last Updated: 23 Sept 1991, 
++ Updated: 20 Oct 09, Fauser,Lehner,Rubey 
++ Keywords:
++ Examples:
++ References:
Partition: Exports == Implementation where
  ++ Partition is an OrderedCancellationAbelianMonoid which is used
  ++ as the basis for symmetric polynomial representation of the
  ++ sums of powers in SymmetricPolynomial.  Thus, \spad{(5 2 2 1)} will
  ++ represent \spad{s5 * s2^2 * s1}.
  L   ==> List
  I   ==> Integer
  OUT ==> OutputForm
  NNI ==> NonNegativeInteger
  UN  ==> Union(%,"failed")
  V   ==> Vector
  RP  ==> Record(c:I, v:V I)
  
  Exports ==> Join(OrderedCancellationAbelianMonoid,
                   ConvertibleTo List Integer) with
    partition: L I -> %
      ++ partition(li) converts a list of integers li to a partition

    powers: L I -> L (L I)
      ++ powers(li) returns a list of 2-element lists.  For each 2-element
      ++ list, the first element is an entry of li and the second
      ++ element is the multiplicity with which the first element
      ++ occurs in li.  There is a 2-element list for each value
      ++ occurring in l.

    powersToPartition: L L I -> %
      ++ \spad{powersToPartition} transforms a list of pairs of parts and
      ++ multiplicities back into an (additive) partition

    partitionToFrobenius: % -> L L I
      ++ \spad{partitionToFrobenius} transforms a partition into its
      ++ Frobenius form. That is a list- of arm and leg-length of the
      ++ diagonal boxes at position (i,i) of the so called core of
      ++ the partition

    FrobeniusToPartition: L L I -> %
      ++ \spad{FrobeniusToPartition} transforms a partition given in
      ++ Frobenius notation into standard (additive) form

    pdct: % -> I
      ++ \spad{pdct(a1^n1 a2^n2 ...)} returns
      ++ \spad{n1! * a1^n1 * n2! * a2^n2 * ...}.
      ++ This function is used in the package \spadtype{CycleIndicators}.
      ++ pdct is the zee-factor of power sum symmetric functions

    conjugate: % -> %
      ++ conjugate(p) returns the conjugate partition of a partition p

    union: (%,%) -> %
      ++ union joins two partitions row-by-row, it is the abelian monoid structure
      ++ on the conjugated partitions, 
      ++ i.e. union(p1,p2) = conjugate(conjugate(p1)+conjugate(p2))
      ++ but directly implemented

    coerce:% -> List Integer
      ++ coerce(p) coerces a partition into a list of integers

    elt:(%,Integer)-> I
      ++ \spad{elt(p,i)} returns the ith part of the partition p
      ++ if i is out of range it returns 0, which equals no-part
      ++ pdct is the zee factor z_\lambda of the partition \lambda


    _#:%-> NonNegativeInteger
      ++ \spad{#p} aka\spad{length(p)} returns the number of parts of the 
      ++ partition p, or its length

    weight:%->Integer
      ++ \spad{weight} returns the number of boxes of the partition also
      ++ called weight

    hookLength: (I, I, %) -> I
      ++ \spad{hookLength} computes the hook length at the position (i,j) 
      ++ of the partition (british notation), hookLength is the armlength
      ++ plus leg length plus the box
      -- a 'hook' at position (i,j) in a Young diagram (partition/shape) is a set of
      -- boxes south of the box (leg) and east of the box (arm) [anglo saxon
      -- representation assumed] together with the box we have
      -- arm = p.j-i
      -- leg = pc.i-j  (with pc the conjugate partition)
      -- we need to make sure not to hit negative legs and have to add the box (i,j)
      -- hookLength computes the length (=number of boxes) of a hook at position (i,j)
      -- in the partition p
      -- The leg-length is also called heigth of the hook.

    hookProd: % -> I
      ++ \spad{hookProd} computes the product of hooklength for all boxes 
      ++ of a diagram, needed to compute GL(n) and S_n dimenions of irreducible modules

    makeRimRep:% -> V I
      ++ \spad{makeRimRep} transforms a partition into a list of north=0
      ++ and east=1 steps, reading from minus y-infinity to plus x-infinity
      ++ leading zeros and tralin ones deleted.
      -- This representation is paramount for a fast algorith to remove
      -- rim-hooks from a Young diagram, and is needed for the Murnaghan-
      -- Nakajama rule 

    rimRepToPart:(V I)  -> %
      ++ \spad{rimRepToPart} transforms a partition in rim-representation
      ++ into a partition in standard (additive) representation
      -- With p a partition pc its conjugate we have:
      -- note: the number of zeros in the rim-representation is the number 
      --       of rows of the partition =length(p)=pc.1
      -- note: then number of ones in the rim-representation is the number 
      --       of colums of the partition, hence gives the first part of
      --       the partiton =lenght(pc)=p.1

    removeRimHook:(V I,I,I) -> L RP
      ++ \spad{removeRimHook} removes one hook of length 'n' from a partition
      ++ given in rim-representation. It returns a list of tuples of type
      ++ Record(c:I, v V I) holding a coefficient (the height of the hook) and 
      ++ the rim represented partition where the hook is removed, the third
      ++ argument holds the history of hook heights previously computed
      -- this allows removeRimHook to be used recursively 

    MurnaghanNakayama:(%,%) -> I
      ++ The function \spad{MurnaghanNakayama} computes the character value
      ++ of an irreducible symmetric group character of type lambda (partition)
      ++ on a conjugacy class of the symmetric group of cycle type rho (partition)
      ++ These are essentially the entries of the transition matrix between
      ++ power sum symmetric functions and Schur symmetric functions
      ++ input order is: irrep lambda, cycletype rho

  Implementation ==> add

    import PartitionsAndPermutations

    Rep := List Integer
    rep(x:%):Rep == x :: Rep
    per(r:Rep):% == r :: %


    0 == empty()

    coerce (s:%) == s pretend List Integer
    convert x == copy(x pretend L I)

    partition list == sort((i1:Integer, i2: Integer): Boolean +-> i2 < i1,list)

    x < y ==
      empty? x => not empty? y
      empty? y => false
      first x = first y => rest x < rest y
      first x < first y

    x = y ==
        EQUAL(x,y)$Lisp
--      empty? x => empty? y
--      empty? y => false
--      first x = first y => rest x = rest y
--      false

    x + y ==
      empty? x => y
      empty? y => x
      first x > first y => concat(first x,rest(x) + y)
      concat(first y,x + rest(y))
    n:NNI * x:% == (zero? n => 0; x + (subtractIfCan(n,1) :: NNI) * x)

    dp: (I,%) -> %
    dp(i,x) ==
      empty? x => 0
      first x = i => rest x
      concat(first x,dp(i,rest x))

    remv: (I,%) -> UN
    remv(i,x) == (member?(i,x) => dp(i,x); "failed")

    subtractIfCan(x, y) ==
      empty? x =>
        empty? y => 0
        "failed"
      empty? y => x
      (aa := remv(first y,x)) case "failed" => "failed"
      subtractIfCan((aa :: %), rest y)

    li1 : L I  --!! 'bite' won't compile without this
    bite: (I,L I) -> L I
    bite(i,li) ==
      empty? li => concat(0,nil())
      first li = i =>
        li1 := bite(i,rest li)
        concat(first(li1) + 1,rest li1)
      concat(0,li)

    li : L I  --!!  'powers' won't compile without this
    powers l ==
      empty? l => nil()
      li := bite(first l,rest l)
      concat([first l,first(li) + 1],powers(rest li))

    powersToPartition(llist) ==
      llist = [] => []::%
      res: L I := []
      pair: L I
      for pair in llist repeat
         li: L I := [(first pair) for i in 1..(second pair)]
         res:= concat(res, li)
      res::%

    partitionToFrobenius(p) ==
      p = 0 => [[]]
      pc: %  := conjugate p
      pi,pci: I
      pr,prc: %
      i:I := 1
      res: L L I :=[]
      for pi in p for pci in pc repeat
        ((pi-i<0) or (pci-i<0)) => break
        res:=concat(res,[pi-i,pci-i])
        i := i + 1
      res

    FrobeniusToPartition(llist) ==
       llist = [[]] => []::%
       len: I := first (first llist) +1
       vec: V I := vector [0::I for i in 1..len]
       n: I := #llist
       i,k: I
       for i in 1..n for pair in llist repeat
          vec.i := vec.i + first pair + 1
          len := i + second pair
          for k in i+1..len repeat
             vec.k := vec.k +1
       (members vec)::%

    conjugate x == conjugate(x pretend Rep)$PartitionsAndPermutations

    union(p1,p2) == 
      empty? p1 => p2
      empty? p2 => p1
      partition [elt(rep p1,i)+elt(rep p2,i) for i in 1..max(#p1,#p2)]

    mkterm: (I,I) -> OUT
    mkterm(i1,i2) ==
      i2 = 1 => (i1 :: OUT) ^ (" " :: OUT)
      (i1 :: OUT) ^ (i2 :: OUT)

    mkexp1: L L I -> L OUT
    mkexp1 lli ==
      empty? lli => nil()
      li := first lli
      empty?(rest lli) and second(li) = 1 =>
        concat(first(li) :: OUT,nil())
      concat(mkterm(first li,second li),mkexp1(rest lli))

    coerce(x:%):OUT ==
        empty? (x pretend Rep) => coerce(x pretend Rep)$Rep
        paren(reduce("*",mkexp1(powers(x pretend Rep))))

    pdct x ==
      */[factorial(second a) * (first(a) ^ (second(a) pretend NNI))
                 for a in powers(x pretend Rep)]

   
    elt(x,i) == 
        if i > #(rep x) or i <1  then 
	    0
	else 
	    elt(rep x,i)$Rep
   
    _#(p) == (#(rep p))$Rep
   
    weight(p) == 
        empty? p => 0
        reduce(_+,rep p)$Rep

    hookLength(i,j,p) ==
      elt(p,j) = 0  =>  0
      elt(p,j) < i  =>  0
      elt(p,i)-i+max(elt(conjugate p,i)-j,0)+1

    hookProd(p) ==
      res : I := 1
      cp : % := conjugate p
      for i in 1..#p for pi in p repeat
         res := res*reduce(_*,[(pi-j+max(cpj-i,0)+1) for j in 1..pi for cpj in cp])
      res

    makeRimRep(p:%):V I ==
      #p = 0 => vector []
      #p = 1 => vector concat([1 for i in 1..elt(p,1)],0)
      fp : I := first p
      res := rest p
      li : L I := concat([1 for i in 1..(fp-(first res))],0)
      while #res>1 repeat
         fp := first res
         res := rest res
         li := concat(concat([1 for i in 1..(fp-(first res))],0),li)
      fp := first res
      li := concat(concat([1 for i in 1..fp],0),li)
      vector li

    rimRepToPart(v:V I):% ==
      li : L I := [v.i for i in 1..#v]
      i : I := reduce(_+,li)                 -- first part
      res : L I := []
      for k in reverse li repeat             -- read vector from right to left
         if k=0  then                        -- for 0 add a part 'i'
             res:=concat(res,i)              
         else
             i:=i-1                          -- for 1 reduce the size of the
      res@Rep                                -- currently added part


    removeRimHook(rimPart, n, cf) ==
      i,k,l,cc: I
      res: L RP
      rp: RP
      li: L I
      res:=[]::(L RP)
      newRimPart:V I
      -- check for trivial input (should not occur)
      rimPart = [] => [construct(cf,vector [])::RP]
      -- check if n is in range
      not #rimPart > n => res
      -- case 1 and #rimPart-n are different (prune vectors)
      -- also special is if the hook is as long as the whole rim-partirion
      if n+1 = #rimPart then  -- cond on 1 and 0 always true
         newRimPart := copy rimPart
         newRimPart.(n+1) :=1
         newRimPart.1 := 0
         if #rimPart = 2 then
            cc := cf
         else
            cc := cf+(n-1-reduce(_+, [newRimPart.i for i in 2..n]))
         k:=2
         while newRimPart.k = 0 repeat
            k:=k+1
         l:=n
         while newRimPart.l = 1 repeat
            l:=l-1
         if k = l then
            return [construct(cc,vector [])::RP]
         else
            newRimPart := vector [newRimPart.i for i in k..l]
            return [construct(cc,newRimPart)::RP]
      -- start with case i=1
      if rimPart.1 = 1 and rimPart.(n+1) = 0 then
         k := 2
         newRimPart := copy rimPart
         newRimPart.(n+1) := 1
         while newRimPart.k = 0 repeat
            k:=k+1
         newRimPart := vector [newRimPart.i for i in k..#newRimPart]
         cc := cf+(n-reduce(_+, [rimPart.i for i in 1..n+1] ))
         res:=[construct(cc,newRimPart)::RP]
      -- deal with cases in the middle of the vector rimPart
      for i in 2..#rimPart-n-1 repeat
         if rimPart.i = 1 and rimPart.(i+n) = 0 then
             newRimPart: V I := copy rimPart
             newRimPart.i := 0
             newRimPart.(i+n) := 1
             cc := cf+(n-reduce(_+, [rimPart.k for k in i..i+n]))
             res:=concat(construct(cc,newRimPart)::RP,res)
      -- the last case is also different, check that this is not
      -- overlapping with the first case if n+1=#rimPart (prevents double counting)
      if rimPart.(#rimPart-n) = 1 and rimPart.(#rimPart) = 0 and not n+1=#rimPart then
         k := #rimPart-1
         newRimPart := copy rimPart
         newRimPart.(#rimPart-n) := 0
         while newRimPart.k = 1 repeat
            k:=k-1
         newRimPart := vector [newRimPart.i for i in 1..k]
         cc := cf+(n-reduce(_+, [rimPart.i for i in #rimPart-n..#rimPart] ))
         res:=concat(construct(cc,newRimPart)::RP,res)
      res


    MurnaghanNakayama(p1:%,p2:%):I ==
      not weight(p1) = weight(p2) => 0
      res: L RP := [construct(0,makeRimRep(p1))::RP]
      li2: L I := p2::(L I)
      ht: I
      cf: NNI
      for n in li2 repeat
         res2 := []::(L RP)
         for rec in res repeat
            res2 := concat(removeRimHook(rec v,n,rec c),res2)
         res:=res2 
      ht := 0
      for rec in res repeat
         cf := abs(rec c)::NNI       -- stupid thing has to be NNI ??
         ht := (-1)^cf+ht
      ht


@
\section{domain SYMPOLY SymmetricPolynomial}
<<domain SYMPOLY SymmetricPolynomial>>=
)abbrev domain SYMPOLY SymmetricPolynomial
++ Description:
++ This domain implements symmetric polynomial
SymmetricPolynomial(R:Ring) == PolynomialRing(R,Partition) add
       Term:=  Record(k:Partition,c:R)
       Rep:=  List Term

-- override PR implementation because coeff. arithmetic too expensive (??)

       if R has EntireRing then
         (p1:%) * (p2:%)  ==
            null p1 => 0
            null p2 => 0
            zero?(p1.first.k) => p1.first.c * p2
--            one? p2 => p1
            (p2 = 1) => p1
            +/[[[t1.k+t2.k,t1.c*t2.c]$Term for t2 in p2]
                   for t1 in reverse(p1)]
                   -- This 'reverse' is an efficiency improvement:
                   -- reduces both time and space [Abbott/Bradford/Davenport]
        else
         (p1:%) * (p2:%)  ==
            null p1 => 0
            null p2 => 0
            zero?(p1.first.k) => p1.first.c * p2
--            one? p2 => p1
            (p2 = 1) => p1
            +/[[[t1.k+t2.k,r]$Term for t2 in p2 | (r:=t1.c*t2.c) ~= 0]
                 for t1 in reverse(p1)]
                  -- This 'reverse' is an efficiency improvement:
                  -- reduces both time and space [Abbott/Bradford/Davenport]

@


\section{domain FLSTPERM FlatListPermutation}
<<domain FLSTPERM FlatListPermutation>>=
)abbrev domain FLSTPERM FlatListPermutation
++ Domain for permutations in standard list representation, where only the
++ image of the standard set [1..n] is stored
++ Author: Bertfried Fauser, b.fauser@cs.bham.ac.uk
++ Date Created: 3 Nov 2009
++ Date Last Updated:  
++ Updated: 20 Oct 09 
++ Keywords:
++ Examples:
++ References:
++ Description: PERMCAT and PERM implement in a very general way the automorphisms
++ of a set. The present domain uses a minimal description of standard permutations
++ for efficiency reasons. It was mainly implemented to provide routines for the
++ Lascoux-Schu"utzenberger transition algorithm to multiply and skew Schur functions.
++ FLSTPERM corresponds to the domain LCODE (LehmerCode) in that respect.
++ We use as representation of the permutations Vector Integer to have fast(er?)
++ random access to the elements (mainly for swapping entries). Th entries in the
++ vector have to run one-to-one in 1..n if the vector has length n, representing
++  an S_n permutation.
FlatListPermutation: Exports == Implementation where

  L   ==> List
  I   ==> Integer
  OUT ==> OutputForm
  V   ==> Vector

  Exports ==> Join(ConvertibleTo List Integer) with

     coerce: List Integer -> %
     coerce: % -> List Integer
     coerce:% -> OUT
     
     lehmerCodeToPermutation: L I -> %
        ++ \spad{lehmerCodetoPermutation} transforms a Lehmer code of a permutation
        ++ into the flat-list representation we are using here, that is an isomorphic
        ++ image of the list of intergers 1..n where n is the length of the Lehmer code

  Implementation ==> add

     import Vector Integer

     Rep := Vector Integer
     coerce(lst: List Integer): % == vector lst
     coerce(x: %): List Integer == entries x  
     coerce(x:%):OUT == (members x)::OUT 

     lehmerCodeToPermutation(lst:L I):% ==
        i,k,idx: I
	lst = [] => (vector [1])::%
        ordVec: % := vector [i for i in 1..#lst]
        perm: % := vector [0 for i in 1..#lst]
        for i in 1..#lst for idx in lst repeat
           perm.i := ordVec.(idx+1)
           ordVec := delete(ordVec,ordVec.(idx+i))
        perm

--lehmerCodeToPermutation:=proc(code)
--  option remember;
--  local ordLst,i,idx,per,prune;
--  if nargs=2 and args[2]="prune" then prune:=true; print("prune is true now"); else prune:=false; end if;
--  ordLst:=[seq(i,i in 1..nops(code))];
--  per:=[];
--  for i from 1 to nops(code) do
--     idx:=ordLst[code[i]+1];
--     per:=[op(per),idx];
--     ordLst:=subs(idx=NULL,ordLst);
--  end do;
--  if prune=true then
--     i:=nops(per);
--     while per[i]=i and i>1 do
--        i:=i-1;
--        per:=per[1..-2];
--     end do;
--   end if;
--  per;
--end proc:



@

\section{Tests for the domains: Partiton and FlatListPermutation}
<<test>>=
PAR := PRTITION
par0 := partition []
par1 := partition [3,1,2]
par2 := partition [3,3]
par3 := conjugate par2
par1+par2
union(par1,par2)
par1<par2
weight(par1)
weight(par2)
#par2
#par3
#par0
weight(par0)
[elt(par2,i) for i in 1..#par2]
elt(par2,4)
elt(par2,-1)
hookLength(10,1,par3)
hookLength(1,1,par3)
hookLength(1,2,par3)
hookLength(1,3,par3)
hookLength(2,1,par3)
hookLength(2,2,par3)
hookLength(2,3,par3)
hookProd(par3)
hookProd(par2)
MurnaghanNakayama(par1,par1)
MurnaghanNakayama(par1,par2)
MurnaghanNakayama(par1,par3)
liPars := entries complete partitions(3)
for pi in liPars repeat
   makeRimRep(partition pi)
LLI : List List Integer := []
for pi1 in liPars repeat
   list1: List Integer := []
   for pi2 in liPars repeat
      list1:=concat(list1,MurnaghanNakayama(partition pi1, partition pi2))
   LLI := concat(LLI,list1)
matrix(LLI)
liPars := entries complete partitions(4)
for pi in liPars repeat
   makeRimRep(partition pi)
LLI : List List Integer := []
for pi1 in liPars repeat
   list1: List Integer := []
   for pi2 in liPars repeat
      list1:=concat(list1,MurnaghanNakayama(partition pi1, partition pi2))
   LLI := concat(LLI,list1)
matrix(LLI)
liPars := entries complete partitions(5)
for pi in liPars repeat
   makeRimRep(partition pi)
LLI : List List Integer := []
for pi1 in liPars repeat
   list1: List Integer := []
   for pi2 in liPars repeat
      list1:=concat(list1,MurnaghanNakayama(partition pi1, partition pi2))
   LLI := concat(LLI,list1)
matrix(LLI)
@

<<domain TAB2 Tableau2>>=
)abbrev domain TAB2 Tableau2
++ Author: Bertfried Fauser b.fauser@cs.bham.ac.uk,
++         Franz Lehner lehner@finanz.math.tugraz.at
++         Martin Rubey
++ Date Created: October 2009
++ Date Last Updated: 21 October 2009
++ Fix History: 
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
Tableau2:Exports == Implementation where
    Term ==> Record(coeff:NonNegativeInteger,diag:Partition)

    Exports ==> SetCategory with 
        -- The following functions implement the functionality to multiply
        -- Schur functions using the Littlewood Richardson Rule (LLR)
        -- This is a recursive algorithm which adds by trial and error
	-- boxes to the first shape respecting constraing rules.
	
        littlewood:(Partition,Partition)-> List Term    

	ballot?:%-> Boolean

	partialballot?:(Integer,List Integer)->Boolean
	
	makepair:(List List Integer,Partition)->%

	addbox:(%,Integer,Integer)->List %
	
	addboxt:(List List Integer, Integer, Integer)-> List List Integer
	
	shape: % -> List Partition
	
	multpar:(Partition,Partition)-> Multiset Partition
	
	-- the folloing functions implement the functionality to
        -- multiply and skew Schur functions using the Lascoux
        -- Schuetzenberger transition method on Schubert polynomials
        -- This allows to multiply n schur functions in a single stroke
        -- it gives d irect way to decompose skew Schur functions which
        -- allows to compute the coproduct much faster
	
	partitionToLehmer:Partition -> List Integer

        permutationToLehmer:(List Integer) -> List Integer

        LehmerToPermutation:(List Integer) -> List Integer

        LehmerToPartition:(List Integer) -> Partition

        skewPartitionToLehmer:(Partition,Partition) -> List Integer

        countDescents:(List Integer) -> List Integer

        transition:(List Integer) -> List List Integer

    Implementation ==> add
        Rep:= Record(lambda:Partition,tableau:List List Integer, mu:Partition)
        rep(x:%):Rep == x :: Rep
        per(r:Rep):% == r :: %
	
	makepair(t:List List Integer,p2:Partition):% == 
	    r:List List Integer := [(empty()$(List Integer))
		                    for i in 1..#p2-#t]
	    r := concat(t, r)
            p1: Partition := partition [p2.(i::PositiveInteger) + #(r.i)
		                        for i in 1..#r]

	    per ([p1,r,p2]@Rep)

	shape t == [t.lambda, t.mu]

	partialballot?(n:Integer,w:List Integer) ==
	    one? n => true
	    level:Integer:=0
	    for j in w repeat
	        if j = n then level:=level-1
		if j = n-1 then level:=level+1
		if negative? level then return false
            true
	    
	ballot?(x:%) ==
	    -- the word
	    import List List Integer
	    w:List Integer := reduce(concat, x.tableau)
	    -- number of different labels
            n:Integer:=#x.mu
	    occ:List Vector Integer:= []
	    -- get list of occurrences for each letter i
	    for i in 1..n-1 repeat
		v:List Integer:=[]
		k:Integer:=0
		for j in w repeat
                    if j=i then k:=k+1
		    v:=cons(k,v)
		occ:=cons(vector reverse v, occ)
	    occ:=reverse occ
	    while not empty? occ repeat
	        v1:Vector Integer := first occ
		v2:Vector Integer
	        for v2 in rest occ repeat
		    if any?(negative?,parts (v1-v2)) then
		        return false
		occ:=rest occ
            true
	    
        -- add one box to row i

	multpar(p1,p2) == 
	    if weight p1 < weight p2 then return multpar(p2,p1)
	    abc1:List List Integer := [[i for j in 1..b] for i in 1..#p2 for b in p2::List Integer] -- coerce(p2)@(List Integer)
	    abc:=reduce(concat,abc1)
	    res:List %:= [makepair([[]],p1)]
            eins:Integer:=1
	    for k in 1..#p2  for b in p2::List Integer repeat
	        for j in 1..b repeat
		    res1:List List %:= [addbox(t,k,eins) for t in res]
		    res:=reduce(concat,res1)
            multiset [first shape r for r in res]

	addboxt(t, k, i) ==
	    if i > #t+1 then error "addboxt:i too large"
	    tnew:List List Integer := copy t	    
	    if i = #t+1 then return concat(tnew,[k])
	    tnew i := cons(k,t i)
            tnew   
	
        addbox(t,k,i) == 
	    if i > #t.lambda +1 then return []
	    restbox:List List Integer := t.tableau
	    for m in 1..i repeat
	        restbox:=rest restbox
	    if not empty? restbox and member?(k, reduce(concat,restbox)) then
	        return addbox(t,k,i+1)	    
	    checkyoung:Boolean:=false
            if i = 1 or (t.lambda).i < (t.mu).(i-1) then
	        checkyoung := true
	    else
	        j:=(t.lambda).(i-1)-(t.lambda).i
		if j>0 and ((t.tableau).(i-1)).j < k then
		        checkyoung := true
	    if not checkyoung then return addbox(t,k,i+1)

	    tnewt:List List Integer := addboxt(t.tableau,k,i)
	    w:List Integer:= reduce(concat,tnewt)
            if partialballot?(k,w) then 
	        tnew:%:= makepair(tnewt, t.mu)
		return(cons(tnew,addbox(t,k,i+1)))
	    else
	        return addbox(t,k,i+1)
	    
        coerce(x:%):OutputForm ==
            bracket [coerce(x.lambda)$Partition,coerce(x.tableau)$(List List Integer),coerce(x.mu)$Partition]
@ 


\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>

<<domain PRTITION Partition>>
<<domain SYMPOLY SymmetricPolynomial>>
<<domain TAB2 Tableau2>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
